<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F401RE_NUCLEO_PollingTagDetectNdef\Exe\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F401RE_NUCLEO_PollingTagDetectNdef\Exe\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Sep 23 12:36:26 2024
<BR><P>
<H3>Maximum Stack Usage =       1472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; demoCycle &rArr; demoNdef &rArr; ndefMessageDump &rArr; ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[5a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[46]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of256) referenced 2 times from rfal_iso15693_2.o(.text.iso15693VCDCode)
 <LI><a href="#[45]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of4) referenced 2 times from rfal_iso15693_2.o(.text.iso15693VCDCode)
 <LI><a href="#[42]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5b]">ndefEmptyTypeDump</a> from ndef_dump.o(.text.ndefEmptyTypeDump) referenced 2 times from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[47]">ndefEmptyTypePayloadGetLength</a> from ndef_types_rtd.o(.text.ndefEmptyTypePayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToEmptyType)
 <LI><a href="#[48]">ndefEmptyTypePayloadItem</a> from ndef_types_rtd.o(.text.ndefEmptyTypePayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToEmptyType)
 <LI><a href="#[60]">ndefMediaVCardDump</a> from ndef_dump.o(.text.ndefMediaVCardDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[61]">ndefMediaWifiDump</a> from ndef_dump.o(.text.ndefMediaWifiDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[4f]">ndefRecordToEmptyType</a> from ndef_types_rtd.o(.text.ndefRecordToEmptyType) referenced 2 times from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[53]">ndefRecordToRtdAar</a> from ndef_types_rtd.o(.text.ndefRecordToRtdAar) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[50]">ndefRecordToRtdDeviceInfo</a> from ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[51]">ndefRecordToRtdText</a> from ndef_types_rtd.o(.text.ndefRecordToRtdText) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[52]">ndefRecordToRtdUri</a> from ndef_types_rtd.o(.text.ndefRecordToRtdUri) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[54]">ndefRecordToVCard</a> from ndef_types_mime.o(.text.ndefRecordToVCard) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[55]">ndefRecordToWifi</a> from ndef_type_wifi.o(.text.ndefRecordToWifi) referenced from ndef_types.o(.text.ndefRecordToType)
 <LI><a href="#[5f]">ndefRtdAarDump</a> from ndef_dump.o(.text.ndefRtdAarDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[5c]">ndefRtdDeviceInfoDump</a> from ndef_dump.o(.text.ndefRtdDeviceInfoDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[49]">ndefRtdDeviceInfoPayloadGetLength</a> from ndef_types_rtd.o(.text.ndefRtdDeviceInfoPayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo)
 <LI><a href="#[4a]">ndefRtdDeviceInfoToPayloadItem</a> from ndef_types_rtd.o(.text.ndefRtdDeviceInfoToPayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo)
 <LI><a href="#[5d]">ndefRtdTextDump</a> from ndef_dump.o(.text.ndefRtdTextDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[4b]">ndefRtdTextPayloadGetLength</a> from ndef_types_rtd.o(.text.ndefRtdTextPayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdText)
 <LI><a href="#[4b]">ndefRtdTextPayloadGetLength</a> from ndef_types_rtd.o(.text.ndefRtdTextPayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRtdText)
 <LI><a href="#[4c]">ndefRtdTextToPayloadItem</a> from ndef_types_rtd.o(.text.ndefRtdTextToPayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdText)
 <LI><a href="#[4c]">ndefRtdTextToPayloadItem</a> from ndef_types_rtd.o(.text.ndefRtdTextToPayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRtdText)
 <LI><a href="#[5e]">ndefRtdUriDump</a> from ndef_dump.o(.text.ndefRtdUriDump) referenced from ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
 <LI><a href="#[4d]">ndefRtdUriPayloadGetLength</a> from ndef_types_rtd.o(.text.ndefRtdUriPayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdUri)
 <LI><a href="#[4d]">ndefRtdUriPayloadGetLength</a> from ndef_types_rtd.o(.text.ndefRtdUriPayloadGetLength) referenced 2 times from ndef_types_rtd.o(.text.ndefRtdUri)
 <LI><a href="#[4e]">ndefRtdUriToPayloadItem</a> from ndef_types_rtd.o(.text.ndefRtdUriToPayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRecordToRtdUri)
 <LI><a href="#[4e]">ndefRtdUriToPayloadItem</a> from ndef_types_rtd.o(.text.ndefRtdUriToPayloadItem) referenced 2 times from ndef_types_rtd.o(.text.ndefRtdUri)
 <LI><a href="#[6c]">ndefT2TPollerBeginWriteMessage</a> from ndef_t2t.o(.text.ndefT2TPollerBeginWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[6b]">ndefT2TPollerCheckAvailableSpace</a> from ndef_t2t.o(.text.ndefT2TPollerCheckAvailableSpace) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[6a]">ndefT2TPollerCheckPresence</a> from ndef_t2t.o(.text.ndefT2TPollerCheckPresence) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[62]">ndefT2TPollerContextInitialization</a> from ndef_t2t.o(.text.ndefT2TPollerContextInitialization) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[6d]">ndefT2TPollerEndWriteMessage</a> from ndef_t2t.o(.text.ndefT2TPollerEndWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[63]">ndefT2TPollerNdefDetect</a> from ndef_t2t.o(.text.ndefT2TPollerNdefDetect) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[64]">ndefT2TPollerReadBytes</a> from ndef_t2t.o(.text.ndefT2TPollerReadBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[65]">ndefT2TPollerReadRawMessage</a> from ndef_t2t.o(.text.ndefT2TPollerReadRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[68]">ndefT2TPollerTagFormat</a> from ndef_t2t.o(.text.ndefT2TPollerTagFormat) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[66]">ndefT2TPollerWriteBytes</a> from ndef_t2t.o(.text.ndefT2TPollerWriteBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[67]">ndefT2TPollerWriteRawMessage</a> from ndef_t2t.o(.text.ndefT2TPollerWriteRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[69]">ndefT2TPollerWriteRawMessageLen</a> from ndef_t2t.o(.text.ndefT2TPollerWriteRawMessageLen) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
 <LI><a href="#[78]">ndefT3TPollerBeginWriteMessage</a> from ndef_t3t.o(.text.ndefT3TPollerBeginWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[77]">ndefT3TPollerCheckAvailableSpace</a> from ndef_t3t.o(.text.ndefT3TPollerCheckAvailableSpace) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[76]">ndefT3TPollerCheckPresence</a> from ndef_t3t.o(.text.ndefT3TPollerCheckPresence) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[6e]">ndefT3TPollerContextInitialization</a> from ndef_t3t.o(.text.ndefT3TPollerContextInitialization) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[79]">ndefT3TPollerEndWriteMessage</a> from ndef_t3t.o(.text.ndefT3TPollerEndWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[6f]">ndefT3TPollerNdefDetect</a> from ndef_t3t.o(.text.ndefT3TPollerNdefDetect) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[70]">ndefT3TPollerReadBytes</a> from ndef_t3t.o(.text.ndefT3TPollerReadBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[71]">ndefT3TPollerReadRawMessage</a> from ndef_t3t.o(.text.ndefT3TPollerReadRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[74]">ndefT3TPollerTagFormat</a> from ndef_t3t.o(.text.ndefT3TPollerTagFormat) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[72]">ndefT3TPollerWriteBytes</a> from ndef_t3t.o(.text.ndefT3TPollerWriteBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[73]">ndefT3TPollerWriteRawMessage</a> from ndef_t3t.o(.text.ndefT3TPollerWriteRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[75]">ndefT3TPollerWriteRawMessageLen</a> from ndef_t3t.o(.text.ndefT3TPollerWriteRawMessageLen) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
 <LI><a href="#[84]">ndefT4TPollerBeginWriteMessage</a> from ndef_t4t.o(.text.ndefT4TPollerBeginWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[83]">ndefT4TPollerCheckAvailableSpace</a> from ndef_t4t.o(.text.ndefT4TPollerCheckAvailableSpace) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[82]">ndefT4TPollerCheckPresence</a> from ndef_t4t.o(.text.ndefT4TPollerCheckPresence) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7a]">ndefT4TPollerContextInitialization</a> from ndef_t4t.o(.text.ndefT4TPollerContextInitialization) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[85]">ndefT4TPollerEndWriteMessage</a> from ndef_t4t.o(.text.ndefT4TPollerEndWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7b]">ndefT4TPollerNdefDetect</a> from ndef_t4t.o(.text.ndefT4TPollerNdefDetect) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7c]">ndefT4TPollerReadBytes</a> from ndef_t4t.o(.text.ndefT4TPollerReadBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7d]">ndefT4TPollerReadRawMessage</a> from ndef_t4t.o(.text.ndefT4TPollerReadRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[80]">ndefT4TPollerTagFormat</a> from ndef_t4t.o(.text.ndefT4TPollerTagFormat) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7e]">ndefT4TPollerWriteBytes</a> from ndef_t4t.o(.text.ndefT4TPollerWriteBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[7f]">ndefT4TPollerWriteRawMessage</a> from ndef_t4t.o(.text.ndefT4TPollerWriteRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[81]">ndefT4TPollerWriteRawMessageLen</a> from ndef_t4t.o(.text.ndefT4TPollerWriteRawMessageLen) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
 <LI><a href="#[90]">ndefT5TPollerBeginWriteMessage</a> from ndef_t5t.o(.text.ndefT5TPollerBeginWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8f]">ndefT5TPollerCheckAvailableSpace</a> from ndef_t5t.o(.text.ndefT5TPollerCheckAvailableSpace) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8e]">ndefT5TPollerCheckPresence</a> from ndef_t5t.o(.text.ndefT5TPollerCheckPresence) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[86]">ndefT5TPollerContextInitialization</a> from ndef_t5t.o(.text.ndefT5TPollerContextInitialization) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[91]">ndefT5TPollerEndWriteMessage</a> from ndef_t5t.o(.text.ndefT5TPollerEndWriteMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[87]">ndefT5TPollerNdefDetect</a> from ndef_t5t.o(.text.ndefT5TPollerNdefDetect) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[88]">ndefT5TPollerReadBytes</a> from ndef_t5t.o(.text.ndefT5TPollerReadBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[89]">ndefT5TPollerReadRawMessage</a> from ndef_t5t.o(.text.ndefT5TPollerReadRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8c]">ndefT5TPollerTagFormat</a> from ndef_t5t.o(.text.ndefT5TPollerTagFormat) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8a]">ndefT5TPollerWriteBytes</a> from ndef_t5t.o(.text.ndefT5TPollerWriteBytes) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8b]">ndefT5TPollerWriteRawMessage</a> from ndef_t5t.o(.text.ndefT5TPollerWriteRawMessage) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[8d]">ndefT5TPollerWriteRawMessageLen</a> from ndef_t5t.o(.text.ndefT5TPollerWriteRawMessageLen) referenced from ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
 <LI><a href="#[56]">ndefVCardPayloadGetLength</a> from ndef_types_mime.o(.text.ndefVCardPayloadGetLength) referenced 2 times from ndef_types_mime.o(.text.ndefRecordToVCard)
 <LI><a href="#[57]">ndefVCardToPayloadItem</a> from ndef_types_mime.o(.text.ndefVCardToPayloadItem) referenced 2 times from ndef_types_mime.o(.text.ndefRecordToVCard)
 <LI><a href="#[58]">ndefWifiPayloadGetLength</a> from ndef_type_wifi.o(.text.ndefWifiPayloadGetLength) referenced 2 times from ndef_type_wifi.o(.text.ndefRecordToWifi)
 <LI><a href="#[59]">ndefWifiToPayloadItem</a> from ndef_type_wifi.o(.text.ndefWifiToPayloadItem) referenced 2 times from ndef_type_wifi.o(.text.ndefRecordToWifi)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[1b6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[92]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1b8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1b9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ba]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1bb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bc]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerContextInitialization
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerContextInitialization
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerContextInitialization
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
</UL>

<P><STRONG><a name="[1bd]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
</UL>

<P><STRONG><a name="[d7]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefIsVCardTypeFound
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetVCard
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1c7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EXTI0_IRQHandler &rArr; st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[a8]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[c8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>

<P><STRONG><a name="[102]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>

<P><STRONG><a name="[a7]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>

<P><STRONG><a name="[bf]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a9]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_MspInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 868 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b2]"></a>HAL_SPI_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 662 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>

<P><STRONG><a name="[b8]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_MspInit</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UART_Transmit</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>SystemClock_Config</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>demoCycle</STRONG> (Thumb, 1536 bytes, Stack size 72 bytes, ndef_demo.o(.text.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = demoCycle &rArr; demoNdef &rArr; ndefMessageDump &rArr; ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetActiveDevice
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>demoIni</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ndef_demo.o(.text.demoIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = demoIni &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>hex2Str</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, logger.o(.text.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1a2]"></a>iso15693PhyConfigure</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rfal_iso15693_2.o(.text.iso15693PhyConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[f5]"></a>iso15693VCDCode</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, rfal_iso15693_2.o(.text.iso15693VCDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iso15693VCDCode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[f7]"></a>iso15693VICCDecode</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, rfal_iso15693_2.o(.text.iso15693VICCDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iso15693VICCDecode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[c6]"></a>logUsart</STRONG> (Thumb, 76 bytes, Stack size 288 bytes, logger.o(.text.logUsart))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarDump
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriDump
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoDump
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefEmptyTypeDump
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
</UL>

<P><STRONG><a name="[101]"></a>logUsartInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logger.o(.text.logUsartInit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 960 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = main &rArr; demoCycle &rArr; demoNdef &rArr; ndefMessageDump &rArr; ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f4]"></a>ndefBufferDump</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, ndef_dump.o(.text.ndefBufferDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[5b]"></a>ndefEmptyTypeDump</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ndef_dump.o(.text.ndefEmptyTypeDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ndefEmptyTypeDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[118]"></a>ndefGetRtdAar</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefGetRtdAar))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarDump
</UL>

<P><STRONG><a name="[11c]"></a>ndefGetRtdDeviceInfo</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefGetRtdDeviceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdDeviceInfoDump
</UL>

<P><STRONG><a name="[11d]"></a>ndefGetRtdText</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefGetRtdText))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefGetRtdText
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextDump
</UL>

<P><STRONG><a name="[11e]"></a>ndefGetRtdUri</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefGetRtdUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefGetRtdUri
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriDump
</UL>

<P><STRONG><a name="[103]"></a>ndefGetVCard</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, ndef_types_mime.o(.text.ndefGetVCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndefGetVCard &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaVCardDump
</UL>

<P><STRONG><a name="[105]"></a>ndefGetWifi</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ndef_type_wifi.o(.text.ndefGetWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefGetWifi
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMediaWifiDump
</UL>

<P><STRONG><a name="[60]"></a>ndefMediaVCardDump</STRONG> (Thumb, 820 bytes, Stack size 176 bytes, ndef_dump.o(.text.ndefMediaVCardDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefMediaVCardDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetVCard
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[61]"></a>ndefMediaWifiDump</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ndef_dump.o(.text.ndefMediaWifiDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ndefMediaWifiDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetWifi
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[ea]"></a>ndefMessageAppend</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ndef_message.o(.text.ndefMessageAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefMessageAppend &rArr; ndefRecordGetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[f0]"></a>ndefMessageDecode</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, ndef_message.o(.text.ndefMessageDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ndefMessageDecode &rArr; ndefRecordDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[f1]"></a>ndefMessageDump</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ndef_dump.o(.text.ndefMessageDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ndefMessageDump &rArr; ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[eb]"></a>ndefMessageEncode</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ndef_message.o(.text.ndefMessageEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ndefMessageEncode &rArr; ndefRecordEncode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[10a]"></a>ndefMessageGetInfo</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ndef_message.o(.text.ndefMessageGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ndefMessageGetInfo &rArr; ndefRecordGetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[e4]"></a>ndefMessageInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ndef_message.o(.text.ndefMessageInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[e0]"></a>ndefPollerContextInitialization</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, ndef_poller.o(.text.ndefPollerContextInitialization))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[e1]"></a>ndefPollerNdefDetect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_poller.o(.text.ndefPollerNdefDetect))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[e2]"></a>ndefPollerReadRawMessage</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_poller.o(.text.ndefPollerReadRawMessage))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[e3]"></a>ndefPollerTagFormat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_poller.o(.text.ndefPollerTagFormat))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[ef]"></a>ndefPollerWriteMessage</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, ndef_poller.o(.text.ndefPollerWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ndefPollerWriteMessage &rArr; ndefMessageGetInfo &rArr; ndefRecordGetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadItem
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordEncodeHeader
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[ee]"></a>ndefPollerWriteRawMessage</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_poller.o(.text.ndefPollerWriteRawMessage))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[107]"></a>ndefRecordDecode</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ndef_record.o(.text.ndefRecordDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRecordDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
</UL>

<P><STRONG><a name="[108]"></a>ndefRecordDump</STRONG> (Thumb, 464 bytes, Stack size 320 bytes, ndef_dump.o(.text.ndefRecordDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayload
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetId
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetType
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
</UL>

<P><STRONG><a name="[109]"></a>ndefRecordEncode</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, ndef_record.o(.text.ndefRecordEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ndefRecordEncode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
</UL>

<P><STRONG><a name="[10b]"></a>ndefRecordEncodeHeader</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ndef_record.o(.text.ndefRecordEncodeHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRecordEncodeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[110]"></a>ndefRecordGetId</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordGetId))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[106]"></a>ndefRecordGetLength</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ndef_record.o(.text.ndefRecordGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRecordGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageGetInfo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
</UL>

<P><STRONG><a name="[114]"></a>ndefRecordGetNdefType</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ndef_types.o(.text.ndefRecordGetNdefType))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
</UL>

<P><STRONG><a name="[111]"></a>ndefRecordGetPayload</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ndef_record.o(.text.ndefRecordGetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRecordGetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[10d]"></a>ndefRecordGetPayloadItem</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ndef_record.o(.text.ndefRecordGetPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRecordGetPayloadItem
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[10c]"></a>ndefRecordGetPayloadLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordGetPayloadLength))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
</UL>

<P><STRONG><a name="[10f]"></a>ndefRecordGetType</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordGetType))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[119]"></a>ndefRecordReset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordReset))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
</UL>

<P><STRONG><a name="[112]"></a>ndefRecordSetNdefType</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ndef_types.o(.text.ndefRecordSetNdefType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRecordSetNdefType
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetPayloadLength
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
</UL>

<P><STRONG><a name="[11b]"></a>ndefRecordSetPayload</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordSetPayload))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
</UL>

<P><STRONG><a name="[11a]"></a>ndefRecordSetType</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ndef_record.o(.text.ndefRecordSetType))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
</UL>

<P><STRONG><a name="[4f]"></a>ndefRecordToEmptyType</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ndef_types_rtd.o(.text.ndefRecordToEmptyType))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ndefRecordToEmptyType &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[53]"></a>ndefRecordToRtdAar</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRecordToRtdAar))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndefRecordToRtdAar &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[50]"></a>ndefRecordToRtdDeviceInfo</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ndefRecordToRtdDeviceInfo &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[51]"></a>ndefRecordToRtdText</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRecordToRtdText))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ndefRecordToRtdText &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[52]"></a>ndefRecordToRtdUri</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ndef_types_rtd.o(.text.ndefRecordToRtdUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndefRecordToRtdUri &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[10e]"></a>ndefRecordToType</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ndef_types.o(.text.ndefRecordToType))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndefRecordToType &rArr; ndefRecordTypeStringToTypeId &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeStringToTypeId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordDump
</UL>

<P><STRONG><a name="[54]"></a>ndefRecordToVCard</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, ndef_types_mime.o(.text.ndefRecordToVCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ndefRecordToVCard &rArr; ndefIsVCardTypeFound &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefIsVCardTypeFound
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[55]"></a>ndefRecordToWifi</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, ndef_type_wifi.o(.text.ndefRecordToWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ndefRecordToWifi &rArr; ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetNdefType
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordTypeMatch
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types.o(.text.ndefRecordToType)
</UL>
<P><STRONG><a name="[113]"></a>ndefRecordTypeMatch</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ndef_record.o(.text.ndefRecordTypeMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ndefRecordTypeMatch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdAar
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdUri
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdText
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToRtdDeviceInfo
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToEmptyType
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToWifi
</UL>

<P><STRONG><a name="[116]"></a>ndefRecordTypeStringToTypeId</STRONG> (Thumb, 398 bytes, Stack size 32 bytes, ndef_types.o(.text.ndefRecordTypeStringToTypeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ndefRecordTypeStringToTypeId &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordGetType
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToType
</UL>

<P><STRONG><a name="[e8]"></a>ndefRtdAar</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefRtdAar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRtdAar
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[5f]"></a>ndefRtdAarDump</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ndef_dump.o(.text.ndefRtdAarDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ndefRtdAarDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdAar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[e9]"></a>ndefRtdAarToRecord</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRtdAarToRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRtdAarToRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetPayload
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[5c]"></a>ndefRtdDeviceInfoDump</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ndef_dump.o(.text.ndefRtdDeviceInfoDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ndefRtdDeviceInfoDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdDeviceInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[ec]"></a>ndefRtdText</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRtdText))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRtdText
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[5d]"></a>ndefRtdTextDump</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ndef_dump.o(.text.ndefRtdTextDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ndefRtdTextDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[ed]"></a>ndefRtdTextToRecord</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRtdTextToRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ndefRtdTextToRecord &rArr; ndefRecordSetNdefType
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[e6]"></a>ndefRtdUri</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ndef_types_rtd.o(.text.ndefRtdUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ndefRtdUri &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[5e]"></a>ndefRtdUriDump</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ndef_dump.o(.text.ndefRtdUriDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ndefRtdUriDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefGetRtdUri
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_dump.o(.rodata..Lswitch.table.ndefRecordDumpType)
</UL>
<P><STRONG><a name="[e7]"></a>ndefRtdUriToRecord</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRtdUriToRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ndefRtdUriToRecord &rArr; ndefRecordSetNdefType
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetNdefType
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordSetType
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[6c]"></a>ndefT2TPollerBeginWriteMessage</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerBeginWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ndefT2TPollerBeginWriteMessage &rArr; ndefT2TPollerWriteBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[6b]"></a>ndefT2TPollerCheckAvailableSpace</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t2t.o(.text.ndefT2TPollerCheckAvailableSpace))
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[6a]"></a>ndefT2TPollerCheckPresence</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ndefT2TPollerCheckPresence &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[62]"></a>ndefT2TPollerContextInitialization</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ndef_t2t.o(.text.ndefT2TPollerContextInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefT2TPollerContextInitialization &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[6d]"></a>ndefT2TPollerEndWriteMessage</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerEndWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ndefT2TPollerEndWriteMessage &rArr; ndefT2TPollerWriteBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[63]"></a>ndefT2TPollerNdefDetect</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, ndef_t2t.o(.text.ndefT2TPollerNdefDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ndefT2TPollerNdefDetect &rArr; ndefT2TPollerReadBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[64]"></a>ndefT2TPollerReadBytes</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, ndef_t2t.o(.text.ndefT2TPollerReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ndefT2TPollerReadBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadRawMessage
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerNdefDetect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[65]"></a>ndefT2TPollerReadRawMessage</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerReadRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ndefT2TPollerReadRawMessage &rArr; ndefT2TPollerReadBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[68]"></a>ndefT2TPollerTagFormat</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerTagFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ndefT2TPollerTagFormat &rArr; ndefT2TPollerReadBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[66]"></a>ndefT2TPollerWriteBytes</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, ndef_t2t.o(.text.ndefT2TPollerWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ndefT2TPollerWriteBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerEndWriteMessage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerBeginWriteMessage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessageLen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[67]"></a>ndefT2TPollerWriteRawMessage</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ndef_t2t.o(.text.ndefT2TPollerWriteRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ndefT2TPollerWriteRawMessage &rArr; ndefT2TPollerEndWriteMessage &rArr; ndefT2TPollerWriteBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerEndWriteMessage
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerBeginWriteMessage
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[69]"></a>ndefT2TPollerWriteRawMessageLen</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerWriteRawMessageLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ndefT2TPollerWriteRawMessageLen &rArr; ndefT2TPollerWriteBytes &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT2TWrapper)
</UL>
<P><STRONG><a name="[78]"></a>ndefT3TPollerBeginWriteMessage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ndef_t3t.o(.text.ndefT3TPollerBeginWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ndefT3TPollerBeginWriteMessage &rArr; ndefT3TPollerWriteAttributeInformationBlock &rArr; rfalNfcfPollerUpdate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[77]"></a>ndefT3TPollerCheckAvailableSpace</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ndef_t3t.o(.text.ndefT3TPollerCheckAvailableSpace))
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[76]"></a>ndefT3TPollerCheckPresence</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ndef_t3t.o(.text.ndefT3TPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ndefT3TPollerCheckPresence &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[6e]"></a>ndefT3TPollerContextInitialization</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ndef_t3t.o(.text.ndefT3TPollerContextInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefT3TPollerContextInitialization &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[79]"></a>ndefT3TPollerEndWriteMessage</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ndef_t3t.o(.text.ndefT3TPollerEndWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ndefT3TPollerEndWriteMessage &rArr; ndefT3TPollerWriteAttributeInformationBlock &rArr; rfalNfcfPollerUpdate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[6f]"></a>ndefT3TPollerNdefDetect</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, ndef_t3t.o(.text.ndefT3TPollerNdefDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ndefT3TPollerNdefDetect &rArr; ndefT3TPollerReadAttributeInformationBlock &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[70]"></a>ndefT3TPollerReadBytes</STRONG> (Thumb, 812 bytes, Stack size 104 bytes, ndef_t3t.o(.text.ndefT3TPollerReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ndefT3TPollerReadBytes &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[71]"></a>ndefT3TPollerReadRawMessage</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ndef_t3t.o(.text.ndefT3TPollerReadRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ndefT3TPollerReadRawMessage &rArr; ndefT3TPollerReadBytes &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[74]"></a>ndefT3TPollerTagFormat</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, ndef_t3t.o(.text.ndefT3TPollerTagFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ndefT3TPollerTagFormat &rArr; ndefT3TPollerReadAttributeInformationBlock &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[72]"></a>ndefT3TPollerWriteBytes</STRONG> (Thumb, 892 bytes, Stack size 104 bytes, ndef_t3t.o(.text.ndefT3TPollerWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ndefT3TPollerWriteBytes &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[73]"></a>ndefT3TPollerWriteRawMessage</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ndef_t3t.o(.text.ndefT3TPollerWriteRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ndefT3TPollerWriteRawMessage &rArr; ndefT3TPollerWriteBytes &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerEndWriteMessage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[75]"></a>ndefT3TPollerWriteRawMessageLen</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ndef_t3t.o(.text.ndefT3TPollerWriteRawMessageLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ndefT3TPollerWriteRawMessageLen &rArr; ndefT3TPollerWriteAttributeInformationBlock &rArr; rfalNfcfPollerUpdate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT3TWrapper)
</UL>
<P><STRONG><a name="[84]"></a>ndefT4TPollerBeginWriteMessage</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ndef_t4t.o(.text.ndefT4TPollerBeginWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ndefT4TPollerBeginWriteMessage &rArr; ndefT4TPollerWriteRawMessageLen &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[83]"></a>ndefT4TPollerCheckAvailableSpace</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t4t.o(.text.ndefT4TPollerCheckAvailableSpace))
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[82]"></a>ndefT4TPollerCheckPresence</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, ndef_t4t.o(.text.ndefT4TPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ndefT4TPollerCheckPresence &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[7a]"></a>ndefT4TPollerContextInitialization</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ndef_t4t.o(.text.ndefT4TPollerContextInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefT4TPollerContextInitialization &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[85]"></a>ndefT4TPollerEndWriteMessage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ndef_t4t.o(.text.ndefT4TPollerEndWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ndefT4TPollerEndWriteMessage &rArr; ndefT4TPollerWriteRawMessageLen &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[7b]"></a>ndefT4TPollerNdefDetect</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, ndef_t4t.o(.text.ndefT4TPollerNdefDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ndefT4TPollerNdefDetect &rArr; ndefT4TPollerSelectNdefTagApplication &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[12e]"></a>ndefT4TPollerReadBinary</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, ndef_t4t.o(.text.ndefT4TPollerReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefT4TPollerReadBinary &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[130]"></a>ndefT4TPollerReadBinaryODO</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, ndef_t4t.o(.text.ndefT4TPollerReadBinaryODO))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefT4TPollerReadBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeReadDataODO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
</UL>

<P><STRONG><a name="[7c]"></a>ndefT4TPollerReadBytes</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ndef_t4t.o(.text.ndefT4TPollerReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ndefT4TPollerReadBytes &rArr; ndefT4TPollerReadBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[7d]"></a>ndefT4TPollerReadRawMessage</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ndef_t4t.o(.text.ndefT4TPollerReadRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ndefT4TPollerReadRawMessage &rArr; ndefT4TPollerReadBytes &rArr; ndefT4TPollerReadBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[12d]"></a>ndefT4TPollerSelectFile</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, ndef_t4t.o(.text.ndefT4TPollerSelectFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefT4TPollerSelectFile &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFile
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectFileV1Mapping
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[12b]"></a>ndefT4TPollerSelectNdefTagApplication</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, ndef_t4t.o(.text.ndefT4TPollerSelectNdefTagApplication))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ndefT4TPollerSelectNdefTagApplication &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeSelectAppl
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[80]"></a>ndefT4TPollerTagFormat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ndef_t4t.o(.text.ndefT4TPollerTagFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ndefT4TPollerTagFormat &rArr; ndefT4TPollerWriteBytes &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TReadAndParseCCFile
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[135]"></a>ndefT4TPollerWriteBinary</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, ndef_t4t.o(.text.ndefT4TPollerWriteBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefT4TPollerWriteBinary &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteData
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>

<P><STRONG><a name="[137]"></a>ndefT4TPollerWriteBinaryODO</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, ndef_t4t.o(.text.ndefT4TPollerWriteBinaryODO))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerComposeWriteDataODO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT4TPollerParseRAPDU
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>

<P><STRONG><a name="[7e]"></a>ndefT4TPollerWriteBytes</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ndef_t4t.o(.text.ndefT4TPollerWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ndefT4TPollerWriteBytes &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[7f]"></a>ndefT4TPollerWriteRawMessage</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ndef_t4t.o(.text.ndefT4TPollerWriteRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ndefT4TPollerWriteRawMessage &rArr; ndefT4TPollerEndWriteMessage &rArr; ndefT4TPollerWriteRawMessageLen &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerEndWriteMessage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessageLen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[81]"></a>ndefT4TPollerWriteRawMessageLen</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ndef_t4t.o(.text.ndefT4TPollerWriteRawMessageLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ndefT4TPollerWriteRawMessageLen &rArr; ndefT4TPollerWriteBinaryODO &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerEndWriteMessage
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerBeginWriteMessage
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT4TWrapper)
</UL>
<P><STRONG><a name="[90]"></a>ndefT5TPollerBeginWriteMessage</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ndef_t5t.o(.text.ndefT5TPollerBeginWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ndefT5TPollerBeginWriteMessage &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8f]"></a>ndefT5TPollerCheckAvailableSpace</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ndef_t5t.o(.text.ndefT5TPollerCheckAvailableSpace))
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8e]"></a>ndefT5TPollerCheckPresence</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ndef_t5t.o(.text.ndefT5TPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ndefT5TPollerCheckPresence &rArr; rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[86]"></a>ndefT5TPollerContextInitialization</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, ndef_t5t.o(.text.ndefT5TPollerContextInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ndefT5TPollerContextInitialization &rArr; rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerSelect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[91]"></a>ndefT5TPollerEndWriteMessage</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ndef_t5t.o(.text.ndefT5TPollerEndWriteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ndefT5TPollerEndWriteMessage &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[87]"></a>ndefT5TPollerNdefDetect</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, ndef_t5t.o(.text.ndefT5TPollerNdefDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ndefT5TPollerNdefDetect &rArr; ndefT5TPollerReadBytes &rArr; rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[88]"></a>ndefT5TPollerReadBytes</STRONG> (Thumb, 692 bytes, Stack size 72 bytes, ndef_t5t.o(.text.ndefT5TPollerReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ndefT5TPollerReadBytes &rArr; rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadRawMessage
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerNdefDetect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[89]"></a>ndefT5TPollerReadRawMessage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ndef_t5t.o(.text.ndefT5TPollerReadRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ndefT5TPollerReadRawMessage &rArr; ndefT5TPollerReadBytes &rArr; rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8c]"></a>ndefT5TPollerTagFormat</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, ndef_t5t.o(.text.ndefT5TPollerTagFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ndefT5TPollerTagFormat &rArr; ndefT5TWriteCC &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadMultipleBlocks
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadMultipleBlocks
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TWriteCC
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8a]"></a>ndefT5TPollerWriteBytes</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, ndef_t5t.o(.text.ndefT5TPollerWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TWriteCC
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerEndWriteMessage
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerBeginWriteMessage
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessageLen
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteRawMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8b]"></a>ndefT5TPollerWriteRawMessage</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ndef_t5t.o(.text.ndefT5TPollerWriteRawMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ndefT5TPollerWriteRawMessage &rArr; ndefT5TPollerEndWriteMessage &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerEndWriteMessage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[8d]"></a>ndefT5TPollerWriteRawMessageLen</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ndef_t5t.o(.text.ndefT5TPollerWriteRawMessageLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ndefT5TPollerWriteRawMessageLen &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_poller.o(.rodata.ndefPollerContextInitialization.ndefT5TWrapper)
</UL>
<P><STRONG><a name="[188]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_analogconfig.o(.text.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[149]"></a>rfalCalibrate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rfalCalibrate &rArr; st25r3911AdjustRegulators &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[14d]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[14f]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalChipChangeTestRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[f6]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, rfal_crc.o(.text.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
</UL>

<P><STRONG><a name="[157]"></a>rfalFeliCaPoll</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, rfal_rfst25r3911.o(.text.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
</UL>

<P><STRONG><a name="[15a]"></a>rfalFieldOff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rfalFieldOff &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[15f]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rfalFieldOnAndStartGT &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[186]"></a>rfalGetBitRate</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[fa]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[162]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, rfal_rfst25r3911.o(.text.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[167]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(.text.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[16e]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(.text.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
</UL>

<P><STRONG><a name="[16f]"></a>rfalISO15693TransceiveEOF</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(.text.rfalISO15693TransceiveEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfalISO15693TransceiveEOF &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[170]"></a>rfalISO15693TransceiveEOFAnticollision</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalISO15693TransceiveEOFAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalISO15693TransceiveEOFAnticollision &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[171]"></a>rfalInitialize</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rfalInitialize &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[cf]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, rfal_isodep.o(.text.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[12a]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, rfal_isodep.o(.text.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
</UL>

<P><STRONG><a name="[175]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(.text.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[fc]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rfal_isodep.o(.text.rfalIsoDepInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[176]"></a>rfalIsoDepPollAHandleActivation</STRONG> (Thumb, 788 bytes, Stack size 72 bytes, rfal_isodep.o(.text.rfalIsoDepPollAHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rfalIsoDepPollAHandleActivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[17b]"></a>rfalIsoDepPollBHandleActivation</STRONG> (Thumb, 596 bytes, Stack size 104 bytes, rfal_isodep.o(.text.rfalIsoDepPollBHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalIsoDepPollBHandleActivation &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[128]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, rfal_isodep.o(.text.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
</UL>

<P><STRONG><a name="[17f]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, rfal_isodep.o(.text.rfalIsoDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rfalIsoDepStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[f3]"></a>rfalNfcDataExchangeGetStatus</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rfal_nfc.o(.text.rfalNfcDataExchangeGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rfalNfcDataExchangeGetStatus &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[f2]"></a>rfalNfcDataExchangeStart</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, rfal_nfc.o(.text.rfalNfcDataExchangeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalNfcDataExchangeStart &rArr; rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
</UL>

<P><STRONG><a name="[c9]"></a>rfalNfcDeactivate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rfal_nfc.o(.text.rfalNfcDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rfalNfcDeactivate &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[183]"></a>rfalNfcDepATR</STRONG> (Thumb, 564 bytes, Stack size 272 bytes, rfal_nfcdep.o(.text.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[17e]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 2158 bytes, Stack size 72 bytes, rfal_nfcdep.o(.text.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[18a]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_nfcdep.o(.text.rfalNfcDepInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[185]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, rfal_nfcdep.o(.text.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[187]"></a>rfalNfcDepPSL</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, rfal_nfcdep.o(.text.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcDepPSL &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[181]"></a>rfalNfcDepRLS</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, rfal_nfcdep.o(.text.rfalNfcDepRLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcDepRLS &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[180]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, rfal_nfcdep.o(.text.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalNfcDepStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[ca]"></a>rfalNfcDiscover</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rfal_nfc.o(.text.rfalNfcDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalNfcDiscover &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[cc]"></a>rfalNfcGetActiveDevice</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_nfc.o(.text.rfalNfcGetActiveDevice))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[cb]"></a>rfalNfcGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfc.o(.text.rfalNfcGetState))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[df]"></a>rfalNfcInitialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfal_nfc.o(.text.rfalNfcInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rfalNfcInitialize &rArr; rfalInitialize &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
</UL>

<P><STRONG><a name="[c4]"></a>rfalNfcWorker</STRONG> (Thumb, 3548 bytes, Stack size 168 bytes, rfal_nfc.o(.text.rfalNfcWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rfalNfcWorker &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[dc]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rfal_nfca.o(.text.rfalNfcaPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfalNfcaPollerCheckPresence &rArr; rfalISO14443ATransceiveShortFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[193]"></a>rfalNfcaPollerFullCollisionResolution</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, rfal_nfca.o(.text.rfalNfcaPollerFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rfalNfcaPollerFullCollisionResolution &rArr; rfalNfcaPollerSingleCollisionResolution &rArr; rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[db]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfca.o(.text.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[dd]"></a>rfalNfcaPollerSelect</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, rfal_nfca.o(.text.rfalNfcaPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rfalNfcaPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[19b]"></a>rfalNfcaPollerSingleCollisionResolution</STRONG> (Thumb, 884 bytes, Stack size 96 bytes, rfal_nfca.o(.text.rfalNfcaPollerSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rfalNfcaPollerSingleCollisionResolution &rArr; rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[da]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rfal_nfca.o(.text.rfalNfcaPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[190]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rfal_nfca.o(.text.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d9]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, rfal_nfcb.o(.text.rfalNfcbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[195]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, rfal_nfcb.o(.text.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerSlottedCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d8]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rfal_nfcb.o(.text.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d4]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rfal_nfcb.o(.text.rfalNfcbPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcbPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[19e]"></a>rfalNfcbPollerSlottedCollisionResolution</STRONG> (Thumb, 1386 bytes, Stack size 104 bytes, rfal_nfcb.o(.text.rfalNfcbPollerSlottedCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalNfcbPollerSlottedCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[191]"></a>rfalNfcbPollerTechnologyDetection</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, rfal_nfcb.o(.text.rfalNfcbPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalNfcbPollerTechnologyDetection &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[17c]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(.text.rfalNfcbTR2ToFDT))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[124]"></a>rfalNfcfPollerCheck</STRONG> (Thumb, 850 bytes, Stack size 144 bytes, rfal_nfcf.o(.text.rfalNfcfPollerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadAttributeInformationBlock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerCheckPresence
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerReadBytes
</UL>

<P><STRONG><a name="[192]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_nfcf.o(.text.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[197]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 902 bytes, Stack size 104 bytes, rfal_nfcf.o(.text.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d5]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rfal_nfcf.o(.text.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d6]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rfal_nfcf.o(.text.rfalNfcfPollerPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
</UL>

<P><STRONG><a name="[126]"></a>rfalNfcfPollerUpdate</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, rfal_nfcf.o(.text.rfalNfcfPollerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalNfcfPollerUpdate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteAttributeInformationBlock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteBytes
</UL>

<P><STRONG><a name="[194]"></a>rfalNfcvPollerCheckPresence</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rfal_nfcv.o(.text.rfalNfcvPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalNfcvPollerCheckPresence &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[198]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 656 bytes, Stack size 216 bytes, rfal_nfcv.o(.text.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalISO15693TransceiveEOFAnticollision &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[13a]"></a>rfalNfcvPollerExtendedGetSystemInformation</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, rfal_nfcv.o(.text.rfalNfcvPollerExtendedGetSystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rfalNfcvPollerExtendedGetSystemInformation &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
</UL>

<P><STRONG><a name="[13f]"></a>rfalNfcvPollerExtendedReadSingleBlock</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, rfal_nfcv.o(.text.rfalNfcvPollerExtendedReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rfalNfcvPollerExtendedReadSingleBlock &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
</UL>

<P><STRONG><a name="[145]"></a>rfalNfcvPollerExtendedWriteSingleBlock</STRONG> (Thumb, 212 bytes, Stack size 160 bytes, rfal_nfcv.o(.text.rfalNfcvPollerExtendedWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rfalNfcvPollerExtendedWriteSingleBlock &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>

<P><STRONG><a name="[13b]"></a>rfalNfcvPollerGetSystemInformation</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, rfal_nfcv.o(.text.rfalNfcvPollerGetSystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rfalNfcvPollerGetSystemInformation &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TGetSystemInformation
</UL>

<P><STRONG><a name="[d2]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfcv.o(.text.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[d3]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, rfal_nfcv.o(.text.rfalNfcvPollerInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[142]"></a>rfalNfcvPollerReadMultipleBlocks</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, rfal_nfcv.o(.text.rfalNfcvPollerReadMultipleBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rfalNfcvPollerReadMultipleBlocks &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[13d]"></a>rfalNfcvPollerReadSingleBlock</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, rfal_nfcv.o(.text.rfalNfcvPollerReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rfalNfcvPollerReadSingleBlock &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerCheckPresence
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[13e]"></a>rfalNfcvPollerSelect</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, rfal_nfcv.o(.text.rfalNfcvPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rfalNfcvPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[1a0]"></a>rfalNfcvPollerTransceiveReq</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, rfal_nfcv.o(.text.rfalNfcvPollerTransceiveReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadMultipleBlocks
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRReadSingleBlock
</UL>

<P><STRONG><a name="[144]"></a>rfalNfcvPollerWriteSingleBlock</STRONG> (Thumb, 208 bytes, Stack size 152 bytes, rfal_nfcv.o(.text.rfalNfcvPollerWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rfalNfcvPollerWriteSingleBlock &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>

<P><STRONG><a name="[141]"></a>rfalST25xVPollerM24LRReadMultipleBlocks</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, rfal_st25xv.o(.text.rfalST25xVPollerM24LRReadMultipleBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rfalST25xVPollerM24LRReadMultipleBlocks &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[13c]"></a>rfalST25xVPollerM24LRReadSingleBlock</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rfal_st25xv.o(.text.rfalST25xVPollerM24LRReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rfalST25xVPollerM24LRReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerCheckPresence
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerReadBytes
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[143]"></a>rfalST25xVPollerM24LRWriteSingleBlock</STRONG> (Thumb, 84 bytes, Stack size 120 bytes, rfal_st25xv.o(.text.rfalST25xVPollerM24LRWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteSingleBlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>

<P><STRONG><a name="[15e]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, rfal_analogconfig.o(.text.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[17a]"></a>rfalSetBitRate</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(.text.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[177]"></a>rfalSetErrorHandling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[18e]"></a>rfalSetFDTListen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[17d]"></a>rfalSetFDTPoll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[18f]"></a>rfalSetGT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[18d]"></a>rfalSetMode</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[19a]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[199]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 872 bytes, Stack size 72 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[196]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[158]"></a>rfalStartTransceive</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[19c]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfal_t1t.o(.text.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[19d]"></a>rfalT1TPollerRid</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rfal_t1t.o(.text.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[120]"></a>rfalT2TPollerRead</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rfal_t2t.o(.text.rfalT2TPollerRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalT2TPollerRead &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerCheckPresence
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>

<P><STRONG><a name="[11f]"></a>rfalT2TPollerSectorSelect</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, rfal_t2t.o(.text.rfalT2TPollerSectorSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerCheckPresence
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerReadBytes
</UL>

<P><STRONG><a name="[121]"></a>rfalT2TPollerWrite</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rfal_t2t.o(.text.rfalT2TPollerWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalT2TPollerWrite &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerWriteBytes
</UL>

<P><STRONG><a name="[127]"></a>rfalT4TPollerComposeReadData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalT4TPollerComposeReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
</UL>

<P><STRONG><a name="[131]"></a>rfalT4TPollerComposeReadDataODO</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeReadDataODO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalT4TPollerComposeReadDataODO
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
</UL>

<P><STRONG><a name="[134]"></a>rfalT4TPollerComposeSelectAppl</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeSelectAppl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalT4TPollerComposeSelectAppl &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
</UL>

<P><STRONG><a name="[133]"></a>rfalT4TPollerComposeSelectFile</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeSelectFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalT4TPollerComposeSelectFile &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
</UL>

<P><STRONG><a name="[132]"></a>rfalT4TPollerComposeSelectFileV1Mapping</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeSelectFileV1Mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalT4TPollerComposeSelectFileV1Mapping &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
</UL>

<P><STRONG><a name="[136]"></a>rfalT4TPollerComposeWriteData</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rfalT4TPollerComposeWriteData &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
</UL>

<P><STRONG><a name="[138]"></a>rfalT4TPollerComposeWriteDataODO</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rfal_t4t.o(.text.rfalT4TPollerComposeWriteDataODO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalT4TPollerComposeWriteDataODO &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
</UL>

<P><STRONG><a name="[12f]"></a>rfalT4TPollerParseRAPDU</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_t4t.o(.text.rfalT4TPollerParseRAPDU))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
</UL>

<P><STRONG><a name="[184]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalTransceiveBlockingRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
</UL>

<P><STRONG><a name="[f9]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rfal_rfst25r3911.o(.text.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[178]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(.text.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadMultipleBlocks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerGetSystemInformation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedGetSystemInformation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerSelect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerRead
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[18c]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[18b]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rfalWakeUpModeStart &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[182]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rfalWakeUpModeStop &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[129]"></a>rfalWorker</STRONG> (Thumb, 1876 bytes, Stack size 64 bytes, rfal_rfst25r3911.o(.text.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinaryODO
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerWriteBinary
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinaryODO
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectNdefTagApplication
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerCheckPresence
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[100]"></a>spiInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(.text.spiInit))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>spiTxRx</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi.o(.text.spiTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>

<P><STRONG><a name="[14b]"></a>st25r3911AdjustRegulators</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911AdjustRegulators))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911AdjustRegulators &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[14c]"></a>st25r3911CalibrateAntenna</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911CalibrateAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911CalibrateAntenna &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[1a6]"></a>st25r3911CalibrateCapacitiveSensor</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911CalibrateCapacitiveSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911CalibrateCapacitiveSensor &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[14e]"></a>st25r3911ChangeRegisterBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_com.o(.text.st25r3911ChangeRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[150]"></a>st25r3911ChangeTestRegisterBits</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, st25r3911_com.o(.text.st25r3911ChangeTestRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911ChangeTestRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>

<P><STRONG><a name="[174]"></a>st25r3911CheckChipID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911CheckChipID &rArr; st25r3911ReadRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[1ad]"></a>st25r3911CheckForReceivedInterrupts</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, st25r3911_interrupt.o(.text.st25r3911CheckForReceivedInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
</UL>

<P><STRONG><a name="[14a]"></a>st25r3911CheckReg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, st25r3911.o(.text.st25r3911CheckReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[1ae]"></a>st25r3911ClearInterrupts</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911ClearInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[15b]"></a>st25r3911ClrRegisterBits</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, st25r3911_com.o(.text.st25r3911ClrRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911ClrRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[166]"></a>st25r3911DisableInterrupts</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
</UL>

<P><STRONG><a name="[164]"></a>st25r3911EnableInterrupts</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911EnableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[159]"></a>st25r3911ExecuteCommand</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = st25r3911ExecuteCommand &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[153]"></a>st25r3911ExecuteCommands</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911ExecuteCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911ExecuteCommands &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[163]"></a>st25r3911GetInterrupt</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, st25r3911_interrupt.o(.text.st25r3911GetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st25r3911GetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[172]"></a>st25r3911InitInterrupts</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, st25r3911_interrupt.o(.text.st25r3911InitInterrupts))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[173]"></a>st25r3911Initialize</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911Initialize &rArr; st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[a5]"></a>st25r3911Isr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, st25r3911_interrupt.o(.text.st25r3911Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911Isr &rArr; st25r3911CheckForReceivedInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>st25r3911MeasureAmplitude</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911MeasureAmplitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911MeasureAmplitude &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[1a7]"></a>st25r3911MeasureCapacitance</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911MeasureCapacitance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911MeasureCapacitance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[1a5]"></a>st25r3911MeasurePhase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911MeasurePhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911MeasurePhase &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[1ac]"></a>st25r3911ModifyRegister</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, st25r3911_com.o(.text.st25r3911ModifyRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
</UL>

<P><STRONG><a name="[1a8]"></a>st25r3911OscOn</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911OscOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911OscOn &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
</UL>

<P><STRONG><a name="[160]"></a>st25r3911PerformCollisionAvoidance</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911PerformCollisionAvoidance))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r3911PerformCollisionAvoidance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[154]"></a>st25r3911ReadFifo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911ReadFifo &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[152]"></a>st25r3911ReadMultipleRegisters</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911ReadMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckForReceivedInterrupts
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[165]"></a>st25r3911ReadRegister</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911ReadRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
</UL>

<P><STRONG><a name="[1a1]"></a>st25r3911SetBitrate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, st25r3911.o(.text.st25r3911SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911SetBitrate &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[168]"></a>st25r3911SetNoResponseTime_64fcs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911SetNoResponseTime_64fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911SetNoResponseTime_64fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[1a9]"></a>st25r3911SetNumTxBits</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911SetNumTxBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911SetNumTxBits &rArr; st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[15c]"></a>st25r3911SetRegisterBits</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, st25r3911_com.o(.text.st25r3911SetRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911SetRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[16a]"></a>st25r3911StartGPTimer_8fcs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911StartGPTimer_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[1a3]"></a>st25r3911StreamConfigure</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911StreamConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r3911StreamConfigure &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[15d]"></a>st25r3911TxRxOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(.text.st25r3911TxRxOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911TxRxOff &rArr; st25r3911ClrRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>

<P><STRONG><a name="[161]"></a>st25r3911TxRxOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(.text.st25r3911TxRxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r3911TxRxOn &rArr; st25r3911SetRegisterBits &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[16d]"></a>st25r3911WaitForInterruptsTimed</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, st25r3911_interrupt.o(.text.st25r3911WaitForInterruptsTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st25r3911WaitForInterruptsTimed &rArr; timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateCapacitiveSensor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureCapacitance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasurePhase
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAmplitude
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>

<P><STRONG><a name="[1aa]"></a>st25r3911WriteFifo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911WriteFifo &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[169]"></a>st25r3911WriteRegister</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911WriteRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[16c]"></a>st25r3911WriteTestRegister</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911WriteTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = st25r3911WriteTestRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[c7]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerCalculateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[c5]"></a>timerIsExpired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(.text.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[1af]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c8]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1c9]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ca]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[fe]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[1cb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1cc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b6]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[bb]"></a>UART_SetConfig</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>demoNdef</STRONG> (Thumb, 796 bytes, Stack size 672 bytes, ndef_demo.o(.text.demoNdef))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = demoNdef &rArr; ndefMessageDump &rArr; ndefRecordDump &rArr; ndefBufferDump &rArr; logUsart &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedNotificationWriteDone
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDump
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageDecode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteMessage
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerWriteRawMessage
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdTextToRecord
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdText
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAarToRecord
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdAar
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerTagFormat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerReadRawMessage
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerNdefDetect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefPollerContextInitialization
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[d0]"></a>demoP2P</STRONG> (Thumb, 376 bytes, Stack size 360 bytes, ndef_demo.o(.text.demoP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = demoP2P &rArr; rfalNfcWorker &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefBufferDump
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageEncode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageAppend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUriToRecord
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRtdUri
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefMessageInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[bd]"></a>LedNotificationWriteDone</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, ndef_demo.o(.text.LedNotificationWriteDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedNotificationWriteDone &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNdef
</UL>

<P><STRONG><a name="[122]"></a>ndefT2TPollerWriteBlock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ndef_t2t.o(.text.ndefT2TPollerWriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ndefT2TPollerWriteBlock &rArr; rfalT2TPollerSectorSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerWrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT2TPollerSectorSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT2TPollerTagFormat
</UL>

<P><STRONG><a name="[125]"></a>ndefT3TPollerReadAttributeInformationBlock</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, ndef_t3t.o(.text.ndefT3TPollerReadAttributeInformationBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ndefT3TPollerReadAttributeInformationBlock &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerNdefDetect
</UL>

<P><STRONG><a name="[123]"></a>ndefT3TPollerWriteAttributeInformationBlock</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ndef_t3t.o(.text.ndefT3TPollerWriteAttributeInformationBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ndefT3TPollerWriteAttributeInformationBlock &rArr; rfalNfcfPollerUpdate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerEndWriteMessage
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerBeginWriteMessage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessageLen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerTagFormat
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT3TPollerWriteRawMessage
</UL>

<P><STRONG><a name="[12c]"></a>ndefT4TReadAndParseCCFile</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ndef_t4t.o(.text.ndefT4TReadAndParseCCFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ndefT4TReadAndParseCCFile &rArr; ndefT4TPollerReadBinary &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerReadBinary
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerSelectFile
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerTagFormat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT4TPollerNdefDetect
</UL>

<P><STRONG><a name="[139]"></a>ndefT5TGetSystemInformation</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, ndef_t5t.o(.text.ndefT5TGetSystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ndefT5TGetSystemInformation &rArr; rfalNfcvPollerExtendedGetSystemInformation &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerGetSystemInformation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedGetSystemInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerContextInitialization
</UL>

<P><STRONG><a name="[146]"></a>ndefT5TPollerWriteSingleBlock</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ndef_t5t.o(.text.ndefT5TPollerWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalST25xVPollerM24LRWriteSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>

<P><STRONG><a name="[140]"></a>ndefT5TWriteCC</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ndef_t5t.o(.text.ndefT5TWriteCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ndefT5TWriteCC &rArr; ndefT5TPollerWriteBytes &rArr; ndefT5TPollerWriteSingleBlock &rArr; rfalST25xVPollerM24LRWriteSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefT5TPollerTagFormat
</UL>

<P><STRONG><a name="[58]"></a>ndefWifiPayloadGetLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_type_wifi.o(.text.ndefWifiPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_type_wifi.o(.text.ndefRecordToWifi)
</UL>
<P><STRONG><a name="[59]"></a>ndefWifiToPayloadItem</STRONG> (Thumb, 288 bytes, Stack size 12 bytes, ndef_type_wifi.o(.text.ndefWifiToPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndefWifiToPayloadItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_type_wifi.o(.text.ndefRecordToWifi)
</UL>
<P><STRONG><a name="[56]"></a>ndefVCardPayloadGetLength</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ndef_types_mime.o(.text.ndefVCardPayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_mime.o(.text.ndefRecordToVCard)
</UL>
<P><STRONG><a name="[57]"></a>ndefVCardToPayloadItem</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, ndef_types_mime.o(.text.ndefVCardToPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefVCardToPayloadItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_mime.o(.text.ndefRecordToVCard)
</UL>
<P><STRONG><a name="[104]"></a>ndefIsVCardTypeFound</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, ndef_types_mime.o(.text.ndefIsVCardTypeFound))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ndefIsVCardTypeFound &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndefRecordToVCard
</UL>

<P><STRONG><a name="[47]"></a>ndefEmptyTypePayloadGetLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefEmptyTypePayloadGetLength))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(.text.ndefRecordToEmptyType)
</UL>
<P><STRONG><a name="[48]"></a>ndefEmptyTypePayloadItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefEmptyTypePayloadItem))
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(.text.ndefRecordToEmptyType)
</UL>
<P><STRONG><a name="[49]"></a>ndefRtdDeviceInfoPayloadGetLength</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefRtdDeviceInfoPayloadGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRtdDeviceInfoPayloadGetLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo)
</UL>
<P><STRONG><a name="[4a]"></a>ndefRtdDeviceInfoToPayloadItem</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ndef_types_rtd.o(.text.ndefRtdDeviceInfoToPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ndefRtdDeviceInfoToPayloadItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ndef_types_rtd.o(.text.ndefRecordToRtdDeviceInfo)
</UL>
<P><STRONG><a name="[4b]"></a>ndefRtdTextPayloadGetLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefRtdTextPayloadGetLength))
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(.text.ndefRtdText)
<LI> ndef_types_rtd.o(.text.ndefRecordToRtdText)
</UL>
<P><STRONG><a name="[4c]"></a>ndefRtdTextToPayloadItem</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefRtdTextToPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRtdTextToPayloadItem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(.text.ndefRtdText)
<LI> ndef_types_rtd.o(.text.ndefRecordToRtdText)
</UL>
<P><STRONG><a name="[4d]"></a>ndefRtdUriPayloadGetLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ndef_types_rtd.o(.text.ndefRtdUriPayloadGetLength))
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(.text.ndefRtdUri)
<LI> ndef_types_rtd.o(.text.ndefRecordToRtdUri)
</UL>
<P><STRONG><a name="[4e]"></a>ndefRtdUriToPayloadItem</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ndef_types_rtd.o(.text.ndefRtdUriToPayloadItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ndefRtdUriToPayloadItem
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ndef_types_rtd.o(.text.ndefRtdUri)
<LI> ndef_types_rtd.o(.text.ndefRecordToRtdUri)
</UL>
<P><STRONG><a name="[45]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iso15693PhyVCDCode1Of4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(.text.iso15693VCDCode)
</UL>
<P><STRONG><a name="[46]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of256))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso15693PhyVCDCode1Of256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(.text.iso15693VCDCode)
</UL>
<P><STRONG><a name="[f8]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 1018 bytes, Stack size 56 bytes, rfal_isodep.o(.text.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[fb]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, rfal_isodep.o(.text.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[179]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, rfal_isodep.o(.text.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[189]"></a>rfalNfcNfcDepActivate</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rfal_nfc.o(.text.rfalNfcNfcDepActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[148]"></a>nfcipTx</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, rfal_nfcdep.o(.text.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[147]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, rfal_nfcdep.o(.text.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[19f]"></a>rfalNfcvParseError</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rfal_nfcv.o(.text.rfalNfcvParseError))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadMultipleBlocks
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedWriteSingleBlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerWriteSingleBlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerGetSystemInformation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedGetSystemInformation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerSelect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerExtendedReadSingleBlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[16b]"></a>rfalPrepareTransceive</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalPrepareTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[151]"></a>rfalErrorHandling</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalErrorHandling &rArr; st25r3911ExecuteCommands &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[155]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfalFIFOStatusIsIncompleteByte &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[156]"></a>rfalFIFOStatusIsMissingPar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFIFOStatusIsMissingPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfalFIFOStatusIsMissingPar &rArr; st25r3911ReadMultipleRegisters &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[1b1]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[1b4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
